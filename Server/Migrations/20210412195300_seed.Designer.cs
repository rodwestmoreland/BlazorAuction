// <auto-generated />
using System;
using BlazorAuction.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlazorAuction.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210412195300_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("B.Models.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("BidTimeCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("BidderId")
                        .HasColumnType("int");

                    b.Property<decimal>("HighBid")
                        .HasColumnType("decimal(16,2)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("myCount")
                        .HasColumnType("int");

                    b.HasKey("BidId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            BidId = 1,
                            BidTimeCreated = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 777, DateTimeKind.Unspecified).AddTicks(1123), new TimeSpan(0, -4, 0, 0, 0)),
                            BidderId = 0,
                            HighBid = 1200m,
                            VehicleId = 1,
                            myCount = 0
                        },
                        new
                        {
                            BidId = 2,
                            BidTimeCreated = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 780, DateTimeKind.Unspecified).AddTicks(4013), new TimeSpan(0, -4, 0, 0, 0)),
                            BidderId = 0,
                            HighBid = 1500m,
                            VehicleId = 1,
                            myCount = 0
                        },
                        new
                        {
                            BidId = 3,
                            BidTimeCreated = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 780, DateTimeKind.Unspecified).AddTicks(4066), new TimeSpan(0, -4, 0, 0, 0)),
                            BidderId = 0,
                            HighBid = 2300m,
                            VehicleId = 2,
                            myCount = 0
                        },
                        new
                        {
                            BidId = 4,
                            BidTimeCreated = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 780, DateTimeKind.Unspecified).AddTicks(4074), new TimeSpan(0, -4, 0, 0, 0)),
                            BidderId = 0,
                            HighBid = 500m,
                            VehicleId = 3,
                            myCount = 0
                        },
                        new
                        {
                            BidId = 5,
                            BidTimeCreated = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 780, DateTimeKind.Unspecified).AddTicks(4079), new TimeSpan(0, -4, 0, 0, 0)),
                            BidderId = 0,
                            HighBid = 5000m,
                            VehicleId = 4,
                            myCount = 0
                        },
                        new
                        {
                            BidId = 6,
                            BidTimeCreated = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 780, DateTimeKind.Unspecified).AddTicks(4084), new TimeSpan(0, -4, 0, 0, 0)),
                            BidderId = 0,
                            HighBid = 1600m,
                            VehicleId = 1,
                            myCount = 0
                        });
                });

            modelBuilder.Entity("B.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BidEndAmount")
                        .HasColumnType("decimal(16,2)");

                    b.Property<DateTimeOffset?>("BidEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("BidId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("BidStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("BidderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cylinders")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriveTrain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StartAmount")
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("TitleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<int>("myCount")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("BidId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            BidEndAmount = 0.0m,
                            BidStartDate = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 782, DateTimeKind.Unspecified).AddTicks(6992), new TimeSpan(0, -4, 0, 0, 0)),
                            Color = "Black",
                            Cylinders = 8,
                            Make = "Pontiac",
                            Mileage = 82000,
                            Model = "Firebird",
                            StartAmount = 850m,
                            TitleType = "Clean",
                            VehicleImagePath = "img/1968Firebird.jpg",
                            Year = 1968,
                            myCount = 0
                        },
                        new
                        {
                            VehicleId = 2,
                            BidEndAmount = 0.0m,
                            BidStartDate = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 782, DateTimeKind.Unspecified).AddTicks(8249), new TimeSpan(0, -4, 0, 0, 0)),
                            Color = "White",
                            Cylinders = 8,
                            Make = "Ford",
                            Mileage = 150000,
                            Model = "F150",
                            StartAmount = 1150m,
                            TitleType = "Clean",
                            VehicleImagePath = "img/1998F150.jpg",
                            Year = 1998,
                            myCount = 0
                        },
                        new
                        {
                            VehicleId = 3,
                            BidEndAmount = 0.0m,
                            BidStartDate = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 782, DateTimeKind.Unspecified).AddTicks(8273), new TimeSpan(0, -4, 0, 0, 0)),
                            Color = "Blue",
                            Cylinders = 6,
                            Make = "Ford",
                            Mileage = 23000,
                            Model = "Ranger",
                            StartAmount = 250m,
                            TitleType = "Flood",
                            VehicleImagePath = "img/1998Ranger.jpg",
                            Year = 1998,
                            myCount = 0
                        },
                        new
                        {
                            VehicleId = 4,
                            BidEndAmount = 0.0m,
                            BidStartDate = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 782, DateTimeKind.Unspecified).AddTicks(8280), new TimeSpan(0, -4, 0, 0, 0)),
                            Color = "Black",
                            Cylinders = 6,
                            Make = "BMW",
                            Mileage = 102000,
                            Model = "i530",
                            StartAmount = 4050m,
                            TitleType = "Rebuilt",
                            VehicleImagePath = "img/2006i530.jpg",
                            Year = 2006,
                            myCount = 0
                        },
                        new
                        {
                            VehicleId = 5,
                            BidEndAmount = 0.0m,
                            BidStartDate = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 782, DateTimeKind.Unspecified).AddTicks(8286), new TimeSpan(0, -4, 0, 0, 0)),
                            Color = "Silver",
                            Cylinders = 4,
                            Make = "Chevy",
                            Mileage = 10000,
                            Model = "Volt",
                            StartAmount = 450m,
                            TitleType = "Salvage",
                            VehicleImagePath = "img/2010Volt.jpg",
                            Year = 2010,
                            myCount = 0
                        },
                        new
                        {
                            VehicleId = 6,
                            BidEndAmount = 0.0m,
                            BidStartDate = new DateTimeOffset(new DateTime(2021, 4, 12, 15, 52, 59, 782, DateTimeKind.Unspecified).AddTicks(8292), new TimeSpan(0, -4, 0, 0, 0)),
                            Color = "Black",
                            Cylinders = 4,
                            Make = "Volvo",
                            Mileage = 23000,
                            Model = "S60",
                            StartAmount = 13850m,
                            TitleType = "Clean",
                            VehicleImagePath = "img/2019S60.jpg",
                            Year = 2019,
                            myCount = 0
                        });
                });

            modelBuilder.Entity("B.Models.Watch", b =>
                {
                    b.Property<int>("WatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("WatcherId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WatchId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Watches");
                });

            modelBuilder.Entity("BlazorAuction.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("B.Models.Bid", b =>
                {
                    b.HasOne("B.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("B.Models.Vehicle", b =>
                {
                    b.HasOne("B.Models.Bid", "Bid")
                        .WithMany()
                        .HasForeignKey("BidId");

                    b.Navigation("Bid");
                });

            modelBuilder.Entity("B.Models.Watch", b =>
                {
                    b.HasOne("B.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlazorAuction.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlazorAuction.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorAuction.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlazorAuction.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
